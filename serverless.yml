org: r3ckk
app: serverless-recipes-api
service: serverless-recipes-api

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  # - serverless-aws-documentation
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example,
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    RECIPES_TABLE: Recipes-API-${self:provider.stage}-v3

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

functions:
  GetRecipe:
    handler: src/lambda/http/getRecipes.handler
    events:
      - http:
          method: get
          path: recipes/{type}/{recipeId}
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  CreateRecipe:
    handler: src/lambda/http/createRecipes.handler
    events:
      - http:
          method: post
          path: recipes
          cors: true

          request:
            schemas:
              application/json: ${file(models/create-recipe-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  UpdateRecipe:
    handler: src/lambda/http/updateRecipes.handler
    events:
      - http:
          method: patch
          path: recipes/{type}/{recipeId}
          cors: true

          request:
            schemas:
              application/json: ${file(models/update-recipe-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  DeleteRecipe:
    handler: src/lambda/http/deleteRecipes.handler
    events:
      - http:
          method: delete
          path: recipes/{type}/{recipeId}
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RecipesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.RECIPES_TABLE}
        AttributeDefinitions:
          - AttributeName: recipeId
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: recipeId
            KeyType: HASH
          - AttributeName: type
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
